:0: Unknown function 'Elixir.Aewallet.KeyPair':compress/1
:0: Unknown function 'Elixir.Aewallet.KeyPair':derive/2
:0: Unknown function 'Elixir.Aewallet.KeyPair':generate_master_key/1
:0: Unknown function 'Elixir.Aewallet.Signing':sign/2
:0: Unknown function 'Elixir.Aewallet.Signing':verify/3
:0: Unknown function 'Elixir.Aewallet.Wallet':create_wallet/2
:0: Unknown function 'Elixir.Aewallet.Wallet':get_private_key/3
:0: Unknown function 'Elixir.Aewallet.Wallet':get_public_key/3
:0: Unknown function 'Elixir.Aewallet.Wallet':get_seed/2
:0: Unknown function 'Elixir.ExJsonSchema.Schema':resolve/1
:0: Unknown function 'Elixir.ExJsonSchema.Validator':validate/2
:0: Unknown function 'Elixir.Msgpax':'pack!'/1
:0: Unknown function 'Elixir.Msgpax':'pack!'/2
:0: Unknown function 'Elixir.Msgpax':unpack/1
:0: Unknown function base58:base58_to_binary/1
:0: Unknown function base58:binary_to_base58/1
:0: Unknown function enacl:generichash/2
:0: Unknown function sha3:hash/2
:0: Unknown type 'Elixir.Account':t/0
:0: Unknown type 'Elixir.Aecore.Account.Account':pubkey/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':account_chainstate/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':accounts/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':chainstate/0
:0: Unknown type 'Elixir.Aecore.Chain.Chainstate':oracles/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleExtendTx':t/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleQueryTx':t/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleRegistrationTx':t/0
:0: Unknown type 'Elixir.Aecore.Structures.OracleResponseTx':t/0
:0: Unknown type 'Elixir.Block':t/0
:0: Unknown type 'Elixir.ChainState':account_chainstate/0
:0: Unknown type 'Elixir.ChainState':accounts/0
:0: Unknown type 'Elixir.Chainstate':accounts/0
:0: Unknown type 'Elixir.List':t/0
:0: Unknown type 'Elixir.SignedTx':t/0
The pattern {'ok', Vaccount_state@1} can never match the type binary() | #{'__struct__':='Elixir.Aecore.Account.Account', 'balance':=non_neg_integer(), 'last_updated':=non_neg_integer(), 'nonce':=non_neg_integer()}
The pattern Verr@1 = {'error', _reason@1} can never match the type 'ok'
The call 'Elixir.Map':merge(Vblocks_info_map@2::'not_found' | {'error',_} | {'ok',map()},Vblocks_map@3::'not_found' | {'error',_} | {'ok',map()} | #{},fun((_,_,_) -> #{'block':=_, _=>_})) will never return since the success typing is (map(),map(),fun((_,_,_) -> any())) -> any() and the contract is (map(),map(),fun((key(),value(),value()) -> value())) -> map()
Function mine_sync_block_to_chain/0 has no local return
The call 'Elixir.Aecore.Miner.Worker':mine_sync_block(Vcblock@1::{'error',_}) will never return since the success typing is (#{'__struct__':='Elixir.Aecore.Chain.Block', _=>_}) -> {'error','miner_is_busy'} | {'ok',#{'__struct__':='Elixir.Aecore.Chain.Block', 'header':=map(), _=>_}} and the contract is ('Elixir.Aecore.Chain.Block':t()) -> {'ok','Elixir.Aecore.Chain.Block':t()} | {'error',reason::atom()}
Function create_coinbase_tx/2 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Account.Tx.SpendTx',Vpayload@1::#{'amount':=number(), 'receiver':=_},'nil',0,0) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
The call 'Elixir.Aecore.Oracle.Oracle':'tx_ttl_is_valid?'(Vtx@1::#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=#{'__struct__':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Oracle.Tx.OracleExtendTx' | 'Elixir.Aecore.Oracle.Tx.OracleQueryTx' | 'Elixir.Aecore.Oracle.Tx.OracleRegistrationTx' | 'Elixir.Aecore.Oracle.Tx.OracleResponseTx', _=>_}, 'sender':=binary(), 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleQueryTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signature':=binary()},Vblock_height@1::pos_integer()) breaks the contract (oracle_txs_with_ttl(),non_neg_integer()) -> boolean()
Function create_block/5 will never be called
Function register/5 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleRegistrationTx',Vpayload@1::#{'query_fee':=_, 'query_format':=_, 'response_format':=_, 'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function query/6 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleQueryTx',Vpayload@1::#{'oracle_address':=_, 'query_data':=_, 'query_fee':=_, 'query_ttl':=_, 'response_ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function respond/3 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleResponseTx',Vpayload@1::#{'query_id':=_, 'response':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Function extend/2 has no local return
The call 'Elixir.Aecore.Tx.DataTx':init('Elixir.Aecore.Oracle.Tx.OracleExtendTx',Vpayload@1::#{'ttl':=_},binary(),Vfee@1::any(),non_neg_integer()) breaks the contract (tx_types(),payload(),binary(),integer(),integer()) -> 'Elixir.Aecore.Tx.DataTx':t()
Invalid type specification for function 'Elixir.Aecore.Oracle.Tx.OracleExtendTx':'process_chainstate!'/7. The success typing is (#{'__struct__':='Elixir.Aecore.Oracle.Tx.OracleExtendTx', 'ttl':=non_neg_integer(), _=>_},_,non_neg_integer(),_,_,map(),#{'registered_oracles':=map(), _=>_}) -> {map(),_}
The inferred type for the 6th argument of 'process_chainstate!'/7 (map()) is not a supertype of gb_merkle_trees:tree(), which is expected type for this argument in the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The inferred return type of 'process_chainstate!'/7 ({map(),_}) has nothing in common with {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The return type {'error' | gb_merkle_trees:tree(),_} in the specification of 'process_chainstate!'/7 is not a subtype of {'error' | gb_merkle_trees:tree(),binary() | map()}, which is the expected return type for the callback of the 'Elixir.Aecore.Tx.Transaction' behaviour
The created fun has no local return
The pattern 'error' can never match the type 'ok'
Function trim_peers/1 will never be called
Function check_peer/2 has no local return
Function 'should_a_peer_be_added?'/1 will never be called
The call 'Elixir.Exexec':send(Vospid@1::non_neg_integer(),'eof') breaks the contract (pid() | os_pid(),binary()) -> 'ok'
Guard test '/='(Verror@1::'nil','nil') can never succeed
Function get_info/1 has no local return
Function get_block/1 has no local return
Function get_raw_blocks/1 has no local return
Function get_pool_txs/1 has no local return
Function send_block/2 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
Function get_peers/1 has no local return
Function get_and_add_peers/1 has no local return
Function get_account_balance/1 has no local return
Function get_account_txs/1 has no local return
Function get/1 has no local return
Function get/2 has no local return
Function broadcast_new_block_added_to_chain_and_new_mined_tx/1 has no local return
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::atom() | #{'txs':=_, _=>_},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::atom() | #{'header':=_, _=>_},'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The call 'Elixir.Aeutil.Serialization':block(Vblock@1::any(),'serialize') will never return since it differs in the 2nd argument from the success typing arguments: (map(),'deserialize')
The pattern {_, Vstate@1} can never match the type 'idle' | 'running'
Function oracle_response/2 has no local return
Function oracle_query/2 has no local return
The call 'Elixir.Aeutil.Serialization':serialize_txs_info_to_json(Vuser_txs@1::[any(),...]) will never return since it differs in the 1st argument from the success typing arguments: ([])
The call 'Elixir.Aeutil.Serialization':serialize_txs_info_to_json(Vuser_txs@1::[any(),...]) will never return since it differs in the 1st argument from the success typing arguments: ([])
The call 'Elixir.Access':get(Vserialized_block@1::binary(),#{#<116>(8, 1, 'integer', ['unsigned', 'big']), #<120>(8, 1, 'integer', ['unsigned', 'big']), #<115>(8, 1, 'integer', ['unsigned', 'big'])}#,'nil') will never return since the success typing is ('nil' | maybe_improper_list() | map(),any(),any()) -> any() and the contract is (container(),term(),term()) -> term()
    ; (nil_container(),any(),default) -> default
The call 'Elixir.Aecore.Tx.SignedTx':hash_tx(#{'__struct__':='Elixir.Aecore.Tx.SignedTx', 'data':=#{'__struct__':='Elixir.Aecore.Tx.DataTx', 'fee':=non_neg_integer(), 'nonce':=non_neg_integer(), 'payload':=_, 'sender':=binary(), 'type':='Elixir.Aecore.Account.Tx.SpendTx' | 'Elixir.Aecore.Structures.OracleExtendTx' | 'Elixir.Aecore.Structures.OracleQueryTx' | 'Elixir.Aecore.Structures.OracleRegistrationTx' | 'Elixir.Aecore.Structures.OracleResponseTx'}, 'signature':='nil'}) breaks the contract ('Elixir.Aecore.Tx.SignedTx':t()) -> binary()
